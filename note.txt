===========================
Create Virtual Environment
===========================

install:	pip install virtualenv

check version:  virtualenv --version

create virtual env folder: python -m venv <folder_name> or dot->(.) (for create in same folder)

activate virtual env: Scripts\activate.bat or source Scripts\activate

deactivate virtual env: deactivate


Available command in python for django management command: python -m django or django-admin

All installed apps list in env: pip freeze>requirements.txt


For git pull issue: git pull origin main --allow-unrelated-histories


====================================================

Diffrent way to create app:
1) python -m django  startapp test2
2) django-admin startapp articles
3) python manage.py startapp test1


=================Create object usig shell===========================
$ python manage.py shell
Python 3.11.5 (tags/v3.11.5:cce6ba9, Aug 24 2023, 14:38:34) [MSC v.1936 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from articles.models import article
>>> article
<class 'articles.models.article'>
>>> article.objects.create("title":"fruits","content":"mango")
  File "<console>", line 1
    article.objects.create("title":"fruits","content":"mango")
                                  ^
SyntaxError: invalid syntax
>>> article.objects.create("title"="fruits","content"="mango") 
  File "<console>", line 1
    article.objects.create("title"="fruits","content"="mango")
                           ^^^^^^^^
SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
>>> article.objects.create(title="fruits",content="mango")     
<article: article object (1)>
>>> article.objects.create(title="audi",content="yamaha")   
<article: article object (2)>
>>> article.objects.create(title="tech",content="google") 
<article: article object (3)>
>>> article.objects.all()                                
<QuerySet [<article: article object (1)>, <article: article object (2)>, <article: article object (3)>]>


==================How to customize Admin Model=============================
In admin.py

from django.contrib import admin
from .models import article
# Register your models here.

class articleAdmin(admin.ModelAdmin):
    list_display = ['id','title','content']
    search_fields = ['title']
    ordering = ['-id']

admin.site.register(article,articleAdmin)

-----------
class article(models.Model):
    title = models.TextField()
    content = models.TextField()

    class Meta:
        ordering = ['id']



        


